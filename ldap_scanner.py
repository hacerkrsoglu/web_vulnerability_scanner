# -*- coding: utf-8 -*-
"""
Created on Wed Sep 11 23:39:45 2024

@author: Hacer
"""

import argparse
import requests
from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException, ElementNotInteractableException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
from webdriver_manager.chrome import ChromeDriverManager
import urllib.parse
from urllib.parse import urlparse, urlunparse

def load_payloads(file_path):
    """
    Dosyadan payload'ları yükler.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            payloads = file.read().splitlines()
        return payloads
    except Exception as e:
        print(f"{file_path}: {e} dosyasından yükleme başarısız oldu.")
        return []

def init_webdriver():
    """
    Selenium WebDriver'ı başlatır.
    """
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Tarayıcıyı arka planda çalıştırır
    service = Service(ChromeDriverManager().install())
    return webdriver.Chrome(service=service, options=chrome_options)

def get_page_content(driver, url):
    """
    Sayfanın içeriğini alır.
    """
    driver.get(url)
    time.sleep(3)  # Sayfanın tamamen yüklenmesini bekle
    return driver.page_source

def find_forms_and_links(driver, url):
    """
    Sayfada bulunan formları ve linkleri bulur.
    """
    content = get_page_content(driver, url)
    soup = BeautifulSoup(content, 'html.parser')
    forms = soup.find_all('form')
    links = soup.find_all('a', href=True)
    return forms, links

def is_within_scope(url, scope_domain):
    """
    URL'nin belirli bir domain içinde olup olmadığını kontrol eder.
    """
    parsed_url = urlparse(url)
    return parsed_url.netloc.endswith(scope_domain)

def check_ldap_injection(driver, url, attributes, payloads, scope_domain):
    """
    LDAP Injection testlerini gerçekleştirir.
    """
    vulnerable_fields = []
    sanitized_url = sanitize_url(url)
    forms, links = find_forms_and_links(driver, sanitized_url)

    if not forms and not links:
        print("Form veya link bulunamadı.")
        return vulnerable_fields

    print(f"Bulunan Form Sayısı: {len(forms)}")
    print(f"Bulunan Link Sayısı: {len(links)}")

    # Formlar için test yap
    for form in forms:
        action = form.get('action') or url
        method = form.get('method', 'get').lower()
        form_data = {}
        input_tags = form.find_all('input')
        for input_tag in input_tags:
            name = input_tag.get('name')
            if name:
                form_data[name] = 'test'

        for attribute in attributes:
            for payload in payloads:
                form_data[attribute] = payload
                try:
                    if method == 'post':
                        for key, value in form_data.items():
                            input_element = form.find_element(By.NAME, key)
                            WebDriverWait(driver, 10).until(
                                EC.visibility_of(input_element)
                            )
                            input_element.clear()
                            input_element.send_keys(value)
                        form.submit()
                    else:
                        query_string = urllib.parse.urlencode(form_data)
                        full_url = urllib.parse.urljoin(sanitized_url, action) + "?" + query_string
                        driver.get(full_url)

                    time.sleep(3)
                    for condition in true_conditions:  # True_conditions listesi ile kontrol
                        if condition in driver.page_source:
                            vulnerable_fields.append(f"Form URL: {action}, Attribute: {attribute}, Payload: {payload}")
                            break  # Eğer zayıf nokta bulunursa, diğer koşulları kontrol etmeye gerek yok

                except ElementNotInteractableException as e:
                    print(f"Element ile etkileşim hatası: {e}")
                except NoSuchElementException as e:
                    print(f"Form öğesi bulunamadı: {e}")
                except Exception as e:
                    print(f"Form isteği hatası: {e}")

    # Linkler için test yap
    for link in links:
        href = link['href']
        full_url = urllib.parse.urljoin(sanitized_url, href)
        if not is_within_scope(full_url, scope_domain):
            continue

        for payload in payloads:
            test_url = full_url + urllib.parse.quote(payload)
            try:
                driver.get(test_url)
                time.sleep(3)
                for condition in true_conditions:
                    if condition in driver.page_source:
                        vulnerable_fields.append(f"Link URL: {test_url}, Payload: {payload}")
                        break  # Eğer zayıf nokta bulunursa, diğer koşulları kontrol etmeye gerek yok

            except Exception as e:
                print(f"Link isteği hatası: {e}")

    return vulnerable_fields

def sanitize_url(url):
    """
    URL'yi temizlemek ve standart bir formata dönüştürmek için kullanılır.
    """
    parsed_url = urlparse(url)
    scheme = parsed_url.scheme
    netloc = parsed_url.netloc
    path = parsed_url.path.rstrip('/')
    clean_url = urlunparse((scheme, netloc, path, '', '', ''))
    return clean_url

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="LDAP Injection vulnerability scanner")
    parser.add_argument('--url', required=True, help='Target URL to test')
    parser.add_argument('--attributes_file', required=True, help='Path to the attributes file')
    parser.add_argument('--payloads_file', required=True, help='Path to the payloads file')
    parser.add_argument('--scope_domain', required=True, help='Scope domain for URL filtering')

    args = parser.parse_args()

    attributes = load_payloads(args.attributes_file)
    payloads = load_payloads(args.payloads_file)

    driver = init_webdriver()

    try:
        vulnerabilities = check_ldap_injection(driver, args.url, attributes, payloads, args.scope_domain)
        if vulnerabilities:
            print("Zafiyetler bulundu:")
            for field in vulnerabilities:
                print(field)
        else:
            print("Zafiyet bulunamadı.")
    finally:
        driver.quit()
