# -*- coding: utf-8 -*-
"""
Created on Wed Sep 11 23:38:04 2024

@author: Hacer
"""

import requests
from bs4 import BeautifulSoup
import argparse
import sys

def get_csrf_token(url, csrfname, request):
    """
    CSRF token'ı almak için sayfayı tarar ve token'ı çıkarır.
    """
    try:
        response = request.get(url)
        response.raise_for_status()  # HTTP hatalarını kontrol et
    except requests.RequestException as e:
        print(f"[-] Sayfa alınırken hata oluştu: {e}")
        sys.exit(1)

    html_content = response.text
    soup = BeautifulSoup(html_content, 'lxml')
    
    try:
        token = soup.find('input', {"name": csrfname}).get("value")
    except AttributeError:
        print("[-] CSRF token ismi sayfada bulunamadı.")
        sys.exit(1)

    return token

def attempt_login(username, password, url, csrfname, message, request):
    """
    CSRF token ile login denemesi yapar.
    """
    token = get_csrf_token(url, csrfname, request)
    login_data = {
        "username": username,  # form parametresi "useralias" yerine "username"
        "password": password,
        "submit": "Login",  # form parametresi "submitLogin" yerine "submit"
        csrfname: token
    }
    
    try:
        response = request.post(url, data=login_data)
        response.raise_for_status()  # HTTP hatalarını kontrol et
    except requests.RequestException as e:
        print(f"[-] Login isteği gönderilemedi: {e}")
        return False

    if message in response.text:
        print("[-] Geçerli CSRF token ile login başarısız.")
        return False
    else:
        print("[+] Geçerli CSRF token ile login başarılı.")
        return True

def check_csrf(username, password, url, csrfname, message, request):
    """
    CSRF açığını test eder.
    """
    print("[+] CSRF açığını test ediyor...")

    # CSRF token olmadan test
    login_data_no_token = {
        "username": username,  # form parametresi "useralias" yerine "username"
        "password": password,
        "submit": "Login"  # form parametresi "submitLogin" yerine "submit"
    }
    
    try:
        response_no_token = request.post(url, data=login_data_no_token)
        response_no_token.raise_for_status()  # HTTP hatalarını kontrol et
    except requests.RequestException as e:
        print(f"[-] Token'sız login isteği gönderilemedi: {e}")
        return False

    if message in response_no_token.text:
        print("[-] CSRF token olmadan login başarısız.")
        return False
    else:
        print("[+] CSRF token olmadan login başarılı. Uygulama potansiyel olarak CSRF'ye karşı savunmasız.")
        return True

def main():
    """
    Komut satırı argümanlarını işler ve CSRF açığını test eder.
    """
    parser = argparse.ArgumentParser(description='CSRF Açığı Testi')
    
    parser.add_argument('-u', '--url', help='Login formunun bulunduğu URL', default='http://testphp.vulnweb.com/login.php')
    parser.add_argument('-c', '--csrfname', help='Login formundaki CSRF token input ismi', required=True)
    parser.add_argument('-m', '--message', help="Geçersiz kimlik bilgileri mesajı", required=True)
    parser.add_argument('-l', '--username', help='Login için kullanıcı adı', required=True)
    parser.add_argument('-p', '--password', help='Login için şifre', required=True)
    
    args = parser.parse_args()

    req_sess = requests.Session()
    
    print("[*] CSRF açığı testi yapılacak URL:", args.url)
    
    # CSRF açığını test et
    is_vulnerable = check_csrf(args.username, args.password, args.url, args.csrfname, args.message, req_sess)
    
    if not is_vulnerable:
        print("[-] Uygulama CSRF'ye karşı savunmasız değil.")
    else:
        print("[+] Uygulama potansiyel olarak CSRF'ye karşı savunmasız.")

if __name__ == '__main__':
    main()
