# -*- coding: utf-8 -*-
"""
Created on Wed Sep 11 23:33:44 2024

@author: Hacer
"""

import requests
from bs4 import BeautifulSoup
import urllib.parse
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import warnings
from urllib.parse import urlparse, urlunparse

# Sertifika uyarılarını bastır
warnings.simplefilter('ignore', InsecureRequestWarning)

def sanitize_url(url):
    """
    URL'yi temizlemek ve standart bir formata dönüştürmek için kullanılır.
    """
    parsed_url = urlparse(url)
    # Parçalanmış URL'yi normalize et
    scheme = parsed_url.scheme
    netloc = parsed_url.netloc
    path = parsed_url.path.rstrip('/')
    # Query ve fragment'i temizle (isteğe bağlı)
    clean_url = urlunparse((scheme, netloc, path, '', '', ''))
    return clean_url

def is_within_scope(url, scope_domain):
    """
    URL'nin belirli bir domain içinde olup olmadığını kontrol eder.
    """
    parsed_url = urlparse(url)
    return parsed_url.netloc.endswith(scope_domain)

def get_page_content(url, use_selenium=False):
    if use_selenium:
        options = Options()
        options.headless = True  # Tarayıcıyı arka planda çalıştır
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

        driver.get(url)
        content = driver.page_source
        driver.quit()
        return content
    else:
        try:
            response = requests.get(url, timeout=10, verify=False)
            if response.status_code == 200:
                return response.text
            else:
                print(f"Sayfa Alınamadı. Statüs kod: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"Bir hata oluştu: {e}")
            return None

def find_forms_and_links(url, use_selenium=False, scope_domain=None):
    content = get_page_content(url, use_selenium)
    if not content:
        return [], []

    soup = BeautifulSoup(content, 'html.parser')
    forms = soup.find_all('form')
    links = soup.find_all('a', href=True)

    sanitized_links = [sanitize_url(link['href']) for link in links if is_within_scope(link['href'], scope_domain)]

    print(f"Bulunan Formlar: {len(forms)}")
    print(f"Bulunan Linkler: {len(sanitized_links)}")
    
    return forms, sanitized_links

def check_xss(url, forms, links, payloads):
    vulnerabilities_found = []

    # Formlarda XSS açığı kontrolü
    for form in forms:
        action = form.get('action')
        method = form.get('method', 'get').lower()
        inputs = form.find_all('input')
        form_data = {}

        for input_element in inputs:
            name = input_element.get('name')
            if name:
                for payload in payloads:
                    form_data[name] = payload

                    if method == 'post':
                        full_url = urllib.parse.urljoin(url, action)
                        try:
                            response = requests.post(full_url, data=form_data, timeout=10, verify=False)
                            if payload in response.text:
                                vulnerabilities_found.append(f"Olası XSS açığı formda bulundu: {full_url} (Payload: {payload})")
                        except requests.exceptions.RequestException as e:
                            print(f"Form POST isteğinde hata oluştu: {e}")
                    else:
                        query_string = urllib.parse.urlencode(form_data)
                        full_url = urllib.parse.urljoin(url, action) + "?" + query_string
                        try:
                            response = requests.get(full_url, timeout=10, verify=False)
                            if payload in response.text:
                                vulnerabilities_found.append(f"Olası XSS açığı formda bulundu: {full_url} (Payload: {payload})")
                        except requests.exceptions.RequestException as e:
                            print(f"Form GET isteğinde hata oluştu: {e}")

    # Linklerde XSS açığı kontrolü
    for link in links:
        href = link
        if href.startswith("javascript:"):
            continue
        
        full_url = urllib.parse.urljoin(url, href)

        for payload in payloads:
            test_url = full_url + urllib.parse.quote(payload)
            try:
                response = requests.get(test_url, timeout=10, verify=False)
                if payload in response.text:
                    vulnerabilities_found.append(f"Olası XSS açığı linkte bulundu: {test_url} (Payload: {payload})")
            except requests.exceptions.RequestException as e:
                print(f"Link kontrolünde hata oluştu: {e}")

    return vulnerabilities_found

def load_payloads(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            payloads = file.read().splitlines()
        return payloads
    except Exception as e:
        print(f"{file_path}: {e} dosyasından yükleme başarısız oldu.")
        return []

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="XSS Test Aracı")
    parser.add_argument('target_url', help="Test edilecek hedef URL")
    parser.add_argument('payloads_file', help="XSS payload dosya yolu")
    parser.add_argument('--scope_domain', default=None, help="Kapsamda olan domain (opsiyonel)")
    parser.add_argument('--use_selenium', action='store_true', help="Dinamik içeriği işlemek için Selenium'u kullan")

    args = parser.parse_args()

    xss_payloads = load_payloads(args.payloads_file)
    forms, links = find_forms_and_links(args.target_url, args.use_selenium, args.scope_domain)
    
    if forms or links:
        vulnerabilities = check_xss(args.target_url, forms, links, xss_payloads)
        if vulnerabilities:
            for vulnerability in vulnerabilities:
                print(vulnerability)
        else:
            print("XSS açığı bulunamadı.")
    else:
        print("Form veya link bulunamadı.")
