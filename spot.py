import requests
import sqlson
import xssson
import commandson
import ldapson
import xxeson
import csrfson

def print_ascii_art():
    art = """
                    _
                   | |
 ___  _ __    ___  | |_
/ __|| '_ \  / _ \ | __|
\__ \| |_) || (_) || |_
|___/| .__/  \___/  \__|
     | |
     |_|
AUTHOR: Hacer
PROGRAM: Spot
PROGRAM PURPOSE: Web Vulnerability Scanner

Usage:
1. Enter the URL to test.
2. Choose the type of vulnerability scan.
3. Review the results and discovered vulnerabilities.
    """
    print(art)

def print_instructions(choice):
    instructions = {
        '1': "For SQL Injection testing:\n- Provide the URL to test.\n- The tool will scan forms and links for SQL Injection vulnerabilities.",
        '2': "For XSS testing:\n- Provide the URL to test.\n- The tool will scan forms and links for XSS vulnerabilities.",
        '3': "For Command Injection testing:\n- Provide the URL to test.\n- The tool will scan forms and links for Command Injection vulnerabilities.",
        '4': "For LDAP Injection testing:\n- Provide the URL to test.\n- The tool will scan for LDAP Injection vulnerabilities using predefined attributes and payloads.",
        '5': "For XML Injection testing:\n- Provide the URL to test.\n- The tool will scan for XML Injection vulnerabilities using predefined payloads.",
        '6': "For CSRF testing:\n- Provide the URL of the login form.\n- Specify the CSRF token name and other details to test for CSRF vulnerabilities."
    }
    print(instructions.get(choice, "Invalid choice. Please select a valid option."))

def menu():
    print("Lütfen yapmak istediğiniz güvenlik testini seçin:")
    print("1. SQL Injection")
    print("2. XSS")
    print("3. Command Injection")
    print("4. LDAP Injection")
    print("5. XML Injection")
    print("6. CSRF")

    choice = input("Seçiminizi girin (1-6): ")
    return choice

def get_arguments(choice):
    args = {}
    if choice == '1':
        args['target_url'] = input("Test etmek istediğiniz URL'yi girin: ")
        args['sql_payloads_file'] = input("SQL payloads dosya yolunu girin: ")
    elif choice == '2':
        args['target_url'] = input("Test etmek istediğiniz URL'yi girin: ")
        args['xss_payloads_file'] = input("XSS payloads dosya yolunu girin: ")
        args['scope_domain'] = input("Scope domain (isteğe bağlı, boş bırakabilirsiniz): ")
    elif choice == '3':
        args['target_url'] = input("Test etmek istediğiniz URL'yi girin: ")
        args['command_payloads_file'] = input("Command Injection payloads dosya yolunu girin: ")
        args['scope_domain'] = input("Scope domain (isteğe bağlı, boş bırakabilirsiniz): ")
    elif choice == '4':
        args['target_url'] = input("Test etmek istediğiniz URL'yi girin: ")
        args['ldap_attributes_file'] = input("LDAP attributes dosya yolunu girin: ")
        args['ldap_payloads_file'] = input("LDAP payloads dosya yolunu girin: ")
    elif choice == '5':
        args['target_url'] = input("Test etmek istediğiniz URL'yi girin: ")
        args['xxe_payloads_file'] = input("XXE payloads dosya yolunu girin: ")
    elif choice == '6':
        args['csrf_url'] = input("CSRF testi için login formunun URL'sini girin: ")
        args['csrfname'] = input("CSRF token input ismini girin: ")
        args['message'] = input("Geçersiz kimlik bilgileri mesajını girin: ")
        args['username'] = input("Login için kullanıcı adını girin: ")
        args['password'] = input("Login için şifreyi girin: ")
    else:
        print("Geçersiz seçim.")
    return args

def main():
    print_ascii_art()
    choice = menu()
    print_instructions(choice)
    args = get_arguments(choice)

    # İşleme göre gerekli dosyaları yükle ve işlemleri başlat
    if choice == '1':
        sql_payloads = sqlson.load_payloads(args['sql_payloads_file'])
        forms, links = sqlson.find_forms_and_links(args['target_url'], use_selenium=True)
        if forms or links:
            if forms:
                vulnerabilities = sqlson.check_sql_injection(args['target_url'], forms, links, sql_payloads, scope_domain=None)
                for vulnerability in vulnerabilities:
                    print(f"SQL Injection Vulnerability Found: {vulnerability}")
            if links:
                vulnerabilities = sqlson.check_sql_injection(args['target_url'], [], links, sql_payloads, scope_domain=None)
                for vulnerability in vulnerabilities:
                    print(f"SQL Injection Vulnerability Found: {vulnerability}")
        else:
            print("Form veya link bulunamadı.")

    elif choice == '2':
        xss_payloads = xssson.load_payloads(args['xss_payloads_file'])
        forms, links = xssson.find_forms_and_links(args['target_url'], use_selenium=True, scope_domain=args.get('scope_domain'))
        if forms or links:
            vulnerabilities = xssson.check_xss(args['target_url'], forms, links, xss_payloads)
            if vulnerabilities:
                for vulnerability in vulnerabilities:
                    print(f"XSS Vulnerability Found: {vulnerability}")
            else:
                print("XSS açığı bulunamadı.")
        else:
            print("Form veya link bulunamadı.")

    elif choice == '3':
        command_payloads = commandson.load_payloads(args['command_payloads_file'])
        forms, links = commandson.find_forms_and_links(args['target_url'], use_selenium=True)
        if forms or links:
            vulnerabilities = commandson.check_command_injection(args['target_url'], forms, links, command_payloads, args.get('scope_domain'))
            if vulnerabilities:
                for vulnerability in vulnerabilities:
                    print(f"Command Injection Vulnerability Found: {vulnerability}")
            else:
                print("Command Injection açığı bulunamadı.")
        else:
            print("Form veya link bulunamadı.")

    elif choice == '4':
        ldap_attributes = ldapson.load_payloads(args['ldap_attributes_file'])
        ldap_payloads = ldapson.load_payloads(args['ldap_payloads_file'])
        vulnerabilities = ldapson.check_ldap_injection(args['target_url'], ldap_attributes, ldap_payloads)
        if vulnerabilities:
            for vulnerability in vulnerabilities:
                print(f"LDAP Injection Vulnerability Found: {vulnerability}")
        else:
            print("LDAP Injection açığı bulunamadı.")

    elif choice == '5':
        xxe_payloads = xxeson.load_payloads(args['xxe_payloads_file'])
        forms, links = xxeson.find_forms_and_links(args['target_url'], use_selenium=True)
        if forms or links:
            vulnerabilities = xxeson.check_xxe_injection(args['target_url'], xxe_payloads, forms, links)
            if vulnerabilities:
                for vulnerability in vulnerabilities:
                    print(f"XXE Injection Vulnerability Found: {vulnerability}")
            else:
                print("XXE Injection açığı bulunamadı.")
        else:
            print("Form veya link bulunamadı.")
    elif choice == '6':
        # Giriş formuna kullanıcı adı, şifre ve CSRF token ile POST isteği gönderiliyor
        request_data = {
            'username': args['username'],
            'password': args['password'],
            args['csrfname']: '12345'  # CSRF token değeri
        }
        
        # CSRF testi için POST isteği yapılıyor
        response = requests.post(args['csrf_url'], data=request_data)

        # Yanıta göre CSRF kontrolü yapılıyor
        if "Invalid username or password" in response.text:
            print("[-] Geçersiz kimlik bilgileri. CSRF açığı bulunamadı.")
        else:
            print("[+] CSRF açığını test ediyor...")

        # CSRF token olmadan POST isteği yapılır
        request_data_no_token = {
            'username': args['username'],
            'password': args['password']
        }

        response_no_token = requests.post(args['csrf_url'], data=request_data_no_token)

        # Sonuç kontrolü
        if "Invalid username or password" in response_no_token.text:
            print("[+] CSRF token olmadan giriş yapılamadı. CSRF açığı yok.")
        else:
            print("[-] CSRF açığı bulundu!")
    else:
        print("Geçersiz seçim.")

if __name__ == "__main__":
    main()